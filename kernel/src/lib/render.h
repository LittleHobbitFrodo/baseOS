//	render.h
//	this file originally belonged to baseOS project
//		an OS template on which to build


//	this file provides simple text renderer
//		this simple renderer supports only 8x8 bitmap fonts



#pragma once
#include "./integers.h"
#include "./bootutils.h"

#define RENDERER_FONT_PLACE_SUB 31
#define RENDERER_FONT_SIZE 97	//	128 - 31

#ifndef RENDERER_SPACE_BETWEEN_LINES
	#define RENDERER_SPACE_BETWEEN_LINES 2
	//	offset between lines in pixels
#endif

#ifndef RENDERER_TAB_SIZE
	#define RENDERER_TAB_SIZE 4
	//	how many characters to leave blank when printing tab character
#endif



union color_t {
	u32 uint;
	union rgb {
		u8 blue;
		u8 green;
		u8 red;
		u8 none;		//	alpha (unsupported by the renderer)
	} rgb;
} __attribute__((packed));


struct screen_t {
	u64 count;

	//	no framebuffer => everything 0 and address null

	u64 h;
	u64 w;
	u16 bpp;

	union color_t *address;
};
struct screen_t screen = {0};

struct output_colors {
	union color_t white;
	union color_t green;
	union color_t red;
	union color_t blue;
	union color_t critical;

	union color_t yellow;
	union color_t orange;
	union color_t cyan;

	union color_t grey;

	union color_t hint;
};

struct output_colors col = {.white = {.uint = 0xffffff},
	.green = {.uint = 0x88ff88},
	.red = {.uint = 0xff8888},
	.blue = {.uint = 0x8888ff},
	.critical = {.uint = 0xff0000},
	.yellow = {.uint = 0xffff00},
	.orange = {.uint = 0xffa500},
	.cyan = {.uint = 0x00ffff},
	.grey = {.uint = 0xaaaaaa},
	.hint = {.uint = 0xaaaaaa}
};


struct renderer_t {
	volatile size_t line;
	volatile size_t column;

	u8 space_between_lines;
	size_t fb;

	union color_t color;

	volatile bool lock;
};
struct renderer_t renderer = {0};

#ifndef FONT_SIZE_T
	#define FONT_SIZE_T u8
#endif

typedef FONT_SIZE_T font_char_t;
#define FONT_BITS (sizeof(font_char_t)*8)

struct font_t {
	font_char_t table[97][sizeof(font_char_t)*8];       //  96?
	u16 bits;
};




void screen_init();

void screen_flush();

void render_init();

inline void endl() {
	//	breaks line
	renderer.line += (renderer.column / screen.w) + (1 * (renderer.column < screen.w));
	renderer.column = 0;
}

inline void tab() {
	//	draws tab on screen
	//		in fact it only calculates space to leave blank
	renderer.column += RENDERER_TAB_SIZE - (renderer.column % RENDERER_TAB_SIZE);
	if (renderer.column >= screen.w) {
		endl();
	}
}


//	renders character on screen
void render(const char c);

//	those functions use the render function
void print(const char *s);
void println(const char *s);
void printu(const u64 u);
void printp(void *p);
void printn(const char* str, size_t n);








///	## FONT
	///	- you can manually change the font by setting the bits
	///	- to make the font X-bit do `#define FONT_SIZE_T u<X>;` and adjust the font struct below
		///	- where X is bit count
		///	- NOTE: fonts must be always YxY (8x8, 16x16, ...)


//		font initialization
static struct font_t font = {.bits = FONT_BITS,
.table = {
	/*each bit is one pixel, set bits will be drawn*/
/*null byte*/{0, 0, 0, 0, 0, 0, 0, 0},
/*space*/{0, 0, 0, 0, 0, 0, 0, 0},
/*!*/{0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0, 0b00100000},
/*"*/{0b01010000, 0b01010000, 0, 0, 0, 0, 0, 0},
/*#*/{0b00100100, 0b00100100, 0b11111111, 0b00100100, 0b00100100, 0b11111111, 0b00100100, 0b00100100},
/*$*/{0b00111100, 0b01011000, 0b01011000, 0b00111100, 0b00011010, 0b00011010, 0b01011010, 0b00111100},
/*%*/{0b00000100, 0b10001000, 0b00001000, 0b00010000, 0b00010000, 0b00100000, 0b00100010, 0b01000000},
/*&*/{0b00011100, 0b00110110, 0b00011100, 0b00111011, 0b01110110, 0b11011100, 0b11001100, 0b01110110},
/*'*/{0b00010000, 0b00010000, 0, 0, 0, 0, 0, 0},
/*(*/{0b00010000, 0b00100000, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00100000, 0b00010000},
/*)*/{0b00001000, 0b00000100, 0b00000010, 0b00000010, 0b00000010, 0b00000010, 0b00000100, 0b00001000},
/***/{0, 0b00101000, 0b00010000, 0b00101000, 0, 0, 0, 0},
/*+*/{0, 0b00010000, 0b00010000, 0b01111100, 0b00010000, 0b00010000, 0, 0},
/*,*/{0, 0, 0, 0, 0, 0, 0b01000000, 0b01000000},
/*-*/{0, 0, 0, 0, 0b00111100, 0, 0, 0},
/*.*/{0, 0, 0, 0, 0, 0, 0, 0b01000000},
/*/*/{0b00000100, 0b00001000, 0b00001000, 0b00010000, 0b00010000, 0b00100000, 0b00100000, 0b01000000},
/*0*/{0b00111000, 0b01000100, 0b01000100, 0b01010100, 0b01010100, 0b01000100, 0b01000100, 0b00111000},
/*1*/{0b00010000, 0b00110000, 0b01010000, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b01111100},
/*2*/{0b00111000, 0b01000100, 0b00000100, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01111100},
/*3*/{0b00111000, 0b01000100, 0b00000100, 0b00011000, 0b00000100, 0b00000100, 0b01000100, 0b00111000},
/*4*/{0b00000100, 0b000001000, 0b000010000, 0b000100000, 0b011111100, 0b000001000, 0b000001000, 0b000001000},
/*5*/{0b01111110, 0b01000000, 0b01000000, 0b01111100, 0b00000010, 0b00000010, 0b01000010, 0b00111100},
/*6*/{0b00011110, 0b00100000, 0b01000000, 0b01111100, 0b01000010, 0b01000010, 0b01000010, 0b00111100},
/*7*/{0b01111110, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b01000000},
/*8*/{0b00111100, 0b010000010, 0b010000010, 0b001111100, 0b010000010, 0b010000010, 0b010000010, 0b001111100},
/*9*/{0b00111100, 0b01000010, 0b01000010, 0b00111110, 0b00000010, 0b00000010, 0b01000010, 0b00111100},
/*:*/{0, 0, 0b00100000, 0, 0, 0, 0b00100000, 0},
/*;*/{0, 0, 0b00100000, 0, 0b00100000,0b00100000, 0b01000000, 0},
/*<*/{0, 0, 0b00001000, 0b00110000, 0b01000000, 0b00110000, 0b00001000, 0},
/*=*/{0, 0, 0b01111100, 0, 0b01111100, 0, 0, 0},
/*>*/{0, 0, 0b00010000, 0b00001100, 0b00000010, 0b00001100, 0b00010000, 0},
/*?*/{0b00111000, 0b01000100, 0b00000100, 0b00001000, 0b00010000, 0b00010000, 0, 0b00010000},
/*@*/{0b00111000, 0b01000100, 0b00000100, 0b01010010, 0b01010010, 0b01001100, 0b01000000, 0b00111110},
/*A*/{0b00111000, 0b01000100, 0b01000100, 0b01111100, 0b01000100, 0b01000100, 0b01000100, 0b01000100},
/*B*/{0b01111000, 0b01000100, 0b01000100, 0b01001000, 0b01000100, 0b01000100, 0b01000100, 0b01111000},
/*C*/{0b00111000, 0b01000100, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b01000100, 0b00111000},
/*D*/{0b01111000, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b01111000},
/*E*/{0b01111000, 0b01000000, 0b01000000, 0b01111000, 0b01000000, 0b01000000, 0b01000000, 0b01111000},
/*F*/{0b01111000, 0b01000000, 0b01000000, 0b01110000, 0b01000000, 0b01000000, 0b01000000, 0b01000000},
/*G*/{0b00111000, 0b01000100, 0b01000000, 0b01011100, 0b01000100, 0b01000100, 0b01000100, 0b00111000},
/*H*/{0b01000010, 0b01000010, 0b01000010, 0b01111110, 0b01000010, 0b01000010, 0b01000010, 0b01000010},
/*I*/{0b00111000, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b00111000},
/*J*/{0b00111100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00100100, 0b00011100},
/*K*/{0b01000100, 0b01001000, 0b01010000, 0b01100000, 0b01010000, 0b01001000, 0b01000100, 0b01000100},
/*L*/{0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b01111000},
/*M*/{0b01000100, 0b01101100, 0b01010100, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b01000100},
/*N*/{0b01000100, 0b01100100, 0b01010100, 0b01001100, 0b01000100, 0b01000100, 0b01000100, 0b01000100},
/*O*/{0b00111000, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b00110000},
/*P*/{0b01111000, 0b01000100, 0b01000100, 0b01111000, 0b01000000, 0b01000000, 0b01000000, 0b01000000},
/*Q*/{0b00111000, 0b01000100, 0b01000100, 0b01000100, 0b01010100, 0b01001100, 0b00111100, 0b00000110},
/*R*/{0b01111000, 0b01000100, 0b01000100, 0b01111000, 0b01000100, 0b01000100, 0b01000100, 0b01000100},
/*S*/{0b00111000, 0b01000100, 0b01000000, 0b00111000, 0b00000100, 0b00000100, 0b01000100, 0b00111000},
/*T*/{0b01111100, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b00010000},
/*U*/{0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b00111000},
/*V*/{0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b00101000, 0b00101000, 0b00010000},
/*W*/{0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b01010100, 0b01101100, 0b01000100},
/*X*/{0b01000100, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b00101000, 0b01000100, 0b01000100},
/*Y*/{0b01000100, 0b01000100, 0b01000100, 0b00111100, 0b00000100, 0b00000100, 0b01000100, 0b00111000},
/*Z*/{0b01111100, 0b00001000, 0b00001000, 0b00010000, 0b00010000, 0b00100000, 0b00100000, 0b01111110},
/*[*/{0b00111000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00111000},
/*\*/{0b01000000, 0b00100000, 0b00100000, 0b00010000, 0b00010000, 0b00001000, 0b00001000, 0b00000100},
/*]*/{0b00011100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00000100, 0b00011100},
/*^*/{0b00010000, 0b00101000, 0, 0, 0, 0, 0, 0},
/*_*/{0, 0, 0, 0, 0, 0, 0, 0b01111100},
/*`*/{0b00100000, 0b00010000, 0, 0, 0, 0, 0, 0},
/*a*/{0, 0, 0, 0b00111000, 0b01000100, 0b01000100, 0b01000100, 0b00111100},
/*b*/{0b01000000, 0b01000000, 0b01000000, 0b01111000, 0b01000100, 0b01000100, 0b01000100, 0b00111000},
/*c*/{0, 0, 0, 0b00111000, 0b01000000, 0b01000000, 0b01000000, 0b00111000},
/*d*/{0b00000010, 0b00000010, 0b00000010, 0b00011110, 0b00100010, 0b00100010, 0b00100010, 0b00011110},
/*e*/{0, 0, 0, 0b00111000, 0b01000100, 0b01111000, 0b01000000, 0b00111000},
/*f*/{0, 0, 0b00111000, 0b01000000, 0b01110000, 0b01000000, 0b01000000, 0b01000000},
/*g*/{0, 0, 0b00111100, 0b01000100, 0b01000100, 0b00111100, 0b00000100, 0b00111000},
/*h*/{0b01000000, 0b01000000, 0b01000000, 0b01111000, 0b01000100, 0b01000100, 0b01000100, 0b01000100},
/*i*/{0, 0b00100000, 0, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00100000},
/*j*/{0, 0b00000100, 0, 0b00000100, 0b00000100, 0b00000100, 0b01000100, 0b00111000},
/*k*/{0b01000000, 0b01000000, 0b01000000, 0b01001000, 0b01110000, 0b01001000, 0b01001000, 0b01001000},
/*l*/{0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00100000, 0b00100000},
/*m*/{0, 0, 0, 0b01111000, 0b01010100, 0b01010100, 0b01000100, 0b01000100},
/*n*/{0, 0, 0, 0b01111000, 0b01000100, 0b01000100, 0b01000100, 0b01000100},
/*o*/{0, 0, 0, 0b00111000, 0b01000100, 0b01000100, 0b01000100, 0b00111000},
/*p*/{0, 0, 0b01111000, 0b01000100, 0b01000100, 0b01111000, 0b01000000, 0b01000000},
/*q*/{0, 0b00111000, 0b01000100, 0b01000100, 0b01000100, 0b00111100, 0b00000101, 0b00000110},
/*r*/{0, 0, 0, 0b01111000, 0b01000100, 0b01000000, 0b01000000, 0b01000000},
/*s*/{0, 0, 0, 0b00111100, 0b01000000, 0b00111000, 0b00000100, 0b01111000},
/*t*/{0b01000000, 0b01000000, 0b01000000, 0b01111000, 0b01000000, 0b01000000, 0b01000000, 0b00111000},
/*u*/{0, 0, 0, 0b01000100, 0b01000100, 0b01000100, 0b01000100, 0b00111100},
/*v*/{0, 0, 0, 0b01000100, 0b01000100, 0b01000100, 0b00101000, 0b00010000},
/*w*/{0, 0, 0, 0b01000100, 0b01000100, 0b01010100, 0b01010100, 0b00111000},
/*w*/{0, 0, 0, 0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100},
/*y*/{0, 0, 0b01000100, 0b01000100, 0b00111100, 0b00000100, 0b01000100, 0b00111000},
/*z*/{0, 0, 0, 0b01111100, 0b00001000, 0b00010000, 0b00100000, 0b01111100},
/*{*/{0b00000100, 0b00001000, 0b00001000, 0b00010000, 0b00001000, 0b00001000, 0b00001000, 0b00000100},
/*|*/{0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b00010000, 0b00010000},
/*}*/{0b00100000, 0b00010000, 0b00010000, 0b00001000, 0b00010000, 0b00010000, 0b00010000, 0b00100000},
/*~*/{0, 0, 0b00110100, 0b01011000, 0, 0, 0, 0},}};